{"componentChunkName":"component---src-templates-blog-post-js","path":"/단축키 익히기/","result":{"data":{"site":{"siteMetadata":{"title":"flog"}},"markdownRemark":{"id":"59562746-5638-56ae-9c3c-7eb0f8243ebd","excerpt":"…","html":"<p>단축키를 익혀서 생산성을 향상시키자</p>\n<h2>단축키를 익혀야 하는 이유</h2>\n<p>대부분의 프로그램이 기본적인 사용법만으로도 대부분의 기능이 사용 가능한 경우도 많다. 어쩌면 그래서 새로운 단축키를 익힐 필요성을 까먹기도 하는 것 같다.\n하지만 단축키를 익히면 많은 것이 달라진다. 자주 사용되는 기능의 작업시간을 단축시키고, 특히 자주 사용되는데에도 불구하고 기능이 숨어있는 등의 경우 단축키를 통해 작업효율이 많이향상된다. (복사붙여넣기를 할때 컨트롤C, 컨트롤V 를 하지 않는다고 생각하면 끔찍하게 불편할 것을 상상해볼수있다.)</p>\n<ul>\n<li>작업 속도가 빨라진다.</li>\n<li>빨라질 뿐만 아니라 손이 편해진다.</li>\n<li>결과적으로 더 많은 일을 원활하게 처리할 수 있게 되면서 필요한 일을 더 많이 처리하게 됨.</li>\n</ul>\n<h2>단축키를익히지 않는 이유</h2>\n<p>사실 단축키를 익히지 않는 것은 단축키를 익히면 좋다는걸 몰라서 그런것은 아닐것이다. 대부분의 경우는 다움과같은 이유로 단축키를 안쓰게 된다.</p>\n<ul>\n<li>이미 기존 사용법에 익숙해서 새로운것을 사용하는것이 더 비효율적이다.</li>\n<li>새로운 방법을 배워서 익히는 것 또한 시간과 노력이 필요하다.</li>\n<li>배우려고 해도, 어떤 것을 배워야 하는지도 모른다.</li>\n<li>단축키 좀 익힌다고 얼마나 효율적일지 확실히 와닿지 않는다.</li>\n</ul>\n<p>그래서 이런식으로 해보기로 한다.</p>\n<ul>\n<li>사용하는 기능을 중 새로운 단축키로 대체해본다.</li>\n<li>한번에 너무 많은 단축키를 익히지 않는다.</li>\n<li>가능하면 호환성이 높은 단축키부터 익힌다.</li>\n<li>새로운 단축키를 찾는데 너무 많은 시간을 쓰지 않는다.</li>\n<li>새로운 단축키가 익숙해질 때쯤 새로운 단축키를 추가로 학습한다.</li>\n</ul>\n<h2>어떤 단축키를 익힐것인가</h2>\n<p>가장 많이 사용하는 VS Code를 기준으로 하되, 다른 프로그램에서도 동일하게 사용이 가능한 것을 좀더 우선으로 하였다.</p>\n<ul>\n<li>자주 사용되는 키를 우선으로 익힌다.</li>\n<li>많은 프로그램에서 호한되는 키를 우선으로 익힌다.</li>\n<li>점차적으로 대체 가능한 키부터 익힌다.</li>\n<li>키보드 맵핑의 노력이 많이 들지 않고, 여러 키보드에서 사용가능한것 우선</li>\n</ul>\n<h2>방향키</h2>\n<p>방향키를 익히는 것을 먼저 해보기로 한다. 미니 배열의 키보드에서도 가장 먼저 없어지는 것이 방향키이고, 다른 키로 대체 가능하기 때문이다.</p>\n<p>아래는 Emac 기준의 방향키인데 VS Code를 비롯하여 생각보다 많은 프로그램에서 키가 먹히는걸 확인했다.</p>\n<p>에디터에서 커서를 이동하는 한칸씩 이동하는 방법이다.</p>\n<ul>\n<li><code class=\"language-text\">Ctrl</code>+<code class=\"language-text\">F</code> : 앞=오른쪽으로(<strong>F</strong>ront)</li>\n<li><code class=\"language-text\">Ctrl</code>+<code class=\"language-text\">B</code> : 뒤=왼쪽으로(<strong>B</strong>ack)</li>\n<li><code class=\"language-text\">Ctrl</code>+<code class=\"language-text\">P</code> : 위(U<strong>P</strong>)</li>\n<li><code class=\"language-text\">Ctrl</code>+<code class=\"language-text\">N</code> : 아래(Dow<strong>N</strong>)</li>\n</ul>\n<p>한번에 많이 이동할때는 Ctrl을 Opt로 바꾸면 된다.</p>\n<ul>\n<li><code class=\"language-text\">Opt</code>+<code class=\"language-text\">F</code> : 한 단어 앞=오른쪽으로(<strong>F</strong>ront)</li>\n<li><code class=\"language-text\">Opt</code>+<code class=\"language-text\">B</code> : 한 단어 뒤=왼쪽으로(<strong>B</strong>ack)</li>\n</ul>\n<p>줄의 맨앞/뒤로 이동한다. Fn+ 방향키와 같다.</p>\n<ul>\n<li>Ctrl A : 그 줄의 맨앞으로</li>\n<li>Ctrl E : 줄 맨 끝으로</li>\n</ul>\n<p>지우는 것도 알아보자.</p>\n<ul>\n<li>Ctrl+D delete left</li>\n<li>Ctrl+H deleft right</li>\n<li>Ctrl+K 커서가 있는 줄의 커서 뒷부분 모두 지움.</li>\n<li>Ctrl+Shift+ K 한줄 모두 지움.</li>\n</ul>\n<p>선택하는것은 shift추가하면 된다? 아니다. 이게 없는게 문제다.</p>\n<p>그리고 이걸 쓰고 있는데…</p>\n<ul>\n<li>Ctrl Shift A : 그 줄의 맨앞까지 선택</li>\n<li>Ctrl Shift E : 줄 맨 끝까지 선택</li>\n</ul>\n<p>{\n“key”: “ctrl+shift+left”,\n“command”: “editor.action.smartSelect.shrink”,\n“when”: “editorTextFocus”\n}\n{\n“key”: “ctrl+shift+right”,\n“command”: “editor.action.smartSelect.expand”,\n“when”: “editorTextFocus”\n}</p>\n<p>Extentsion</p>\n<p>Braket Selector를 설치 후 아래의 단축키 사용</p>\n<p>alt + a = 브라켓 사이를 모두 선택</p>\n<p>그리고 유용하다고 생각한것\n{\n“key”: “shift+cmd+.”,\n“command”: “breadcrumbs.focusAndSelect”,\n“when”: “breadcrumbsPossible”\n}</p>","frontmatter":{"title":"단축키 익히기","date":"May 23, 2021","description":"단축키를 익히자"}},"previous":{"fields":{"slug":"/맥에서 키 바인딩하기/"},"frontmatter":{"title":"맥에서 키 바인딩하기"}},"next":null},"pageContext":{"id":"59562746-5638-56ae-9c3c-7eb0f8243ebd","previousPostId":"f97a56d1-4f64-550d-9140-7bd1666066d9","nextPostId":null}},"staticQueryHashes":["2841359383","3274528899"]}